#
# $Id$
#
# This file contains common definitions for all the filters.
# This file is required; the filters will not run without it.
# The default location of this file is the directory "/usr/local/etc/nbsp".
#
# In addition, each filter has an individual conf file and an rc file. 
# The individual conf file is optional, but the rc file is required.
#
# Fine tuning -
#
# Most of the settings below are directory (and a few other parameter)
# definitions that hardly require modification except in special installations.
# The "Fine-Tuning" section (at the end of this file) does contain some
# parameters that could be useful set in some cases to improve the
# performance of the filters.

set common(filtersconf)   "filters.conf";
#
# Common directories
#
set common(confdir)	  "/usr/local/etc/nbsp"
set common(localconfdirs) [list [file join $common(confdir) "defaults"] \
				[file join $common(confdir) "site"]];
set common(sharedir)	"/usr/local/share/nbsp";
set common(localsharedirs) [list [file join $common(sharedir) "defaults"] \
				 [file join $common(sharedir) "site"]];
##
# regexp {^[^\.]+} [info hostname] _hostname;
# lappend common(localconfdirs) \
#         [file join $common(confdir) "site" ${_hostname}];
##
set common(rcdir)	[file join $common(confdir) "rc.d"];
set common(libdir)	"/usr/local/libexec/nbsp";
set common(locallibdir)	[file join $common(libdir) "site"];
set common(homedir)	"/var/noaaport";	# see note under env below
set common(datadir)	"/var/noaaport/data";
set common(archivedatadir) "/var/noaaport/archive/data";
set common(archiveinvdir) "/var/noaaport/archive/inv";
set common(nbspdir)	"/var/noaaport/nbsp";
set common(tmpdir)	[file join $common(nbspdir) "tmp"];
set common(datainvdir)  [file join $common(datadir) "inv"];
set common(datainvformat)  "%Y%m%d%H";  # format for hourly subdirs

# Common functions used by some filters, and the global variables
# used by them (ccbsize and wmoawips_size come from src/sbn.h).
# (wmoawips_size is used by the dafilter and rstfilter when dealing
# with radar files. The radheadersize is used by the filterlib (dafilter)
# to extract the radar info from the nids data file.
# The total ccb + wmo + ( BBB) + awips header is
# 24 + 18 (+ 4) + 6 + 6 = 54 (58), including \r\r\n twice).
#
set common(filterslib)		[file join $common(libdir) "filters.lib"];
set common(ccbsaved)		1;
set common(ccbsize)		24;
set common(wmoheadersize)	18;     # excluding the possible ( BBB)
set common(wmoawips_size)	30;	# excluding the possible ( BBB)
set common(totalheadersize)  [expr $common(ccbsize) + $common(wmoawips_size)];
# These two are not used; they are here for documentation purposes
set common(wmobbbheadersize)	22;     # including the possible ( BBB)
set common(wmobbbawips_size)	34;     # including the possible ( BBB)
#
set filterslib(ccbsaved)	$common(ccbsaved);
set filterslib(ccbsize)		$common(ccbsize);
set filterslib(wmoawips_size)	$common(wmoawips_size);
set filterslib(totalheadersize) $common(totalheadersize);
# When checking if the body is pure text, include possible RS:30 036 x1e
# ETB:23 027 x17 (ETB is sent at the end of the weatherwire files)
# and the old \001, \003. This list should be kept in sync with the list
# in filter_text() in filters.lib.
set filterslib(bodypartsize)	512;
set filterslib(bodytxtre) {^[[:graph:][:space:]\x01\x03\x1e\x17]+$};
#
set filterslib(gmpk_header_fmt) "\001\r\r\n%03d \r\r\n"; 
set filterslib(gmpk_trailer_str) "\r\r\n\003";
set filterslib(gmpk_header_size) 11;	# gpfilter/c/const.h
set filterslib(wmoawipsgmpk_header_size) [expr $filterslib(wmoawips_size) + \
	$filterslib(gmpk_header_size)]; # not used anymore in nbspradmap
#
set filterslib(ignorebody)	{_(sdus|ti)|\+(grib|bufr)};
#
# Which nids for nbspradinfo must be piped through nbspunz first.
# (Some sites send nmd,net compressed and others send it uncompressed.
# Some sites send dsp, dvl, eet, zlib compressed. filters.lib
# has a workaround to try to detect that and re-process them, if the
# variable "filterslib(doradinfounzretry)" is set to 1. See below.)
#
# Included are (matched against awips1):
#
#  dpa
#  n0r n1r n2r n3r n0z n0v n1v n0s n1s n2s n3s n1p ncr net nmd nst ntp nvl nvw
#  tr[0-2] 
#
# The following have an uncompressed nids header.
#
# tv0-tv2, tzl, dhr, dsp (+ the hi res below + dual pol next)
# n0q naq n1q nbq n2q n3q n0u nau n1u nbu n2u n3u dvl eet (hi res)
# daa dod dpr dsd dta du3 du6 hhc oha pta n[0-3ab][chkmx] (dual pol)
# (the dual pol will be added between july 2010 and december 2012)
#
# The radar files have wmoid sdus[2-8]. The sdus[235678] are data,
# while 4 are status messages.
#
set filterslib(doradinfowmoid) {sdus[235678]};  # used in filters.lib
set filterslib(doradinfounz) {dpa|tr[0-2]|n[0-3][prsvz]|n(cr|st|tp|vl|vw)};
set filterslib(doradinfoboth) {nmd|net};  # use {^$} for empty, {} for all
set filterslib(doradinfounzretry) 1; 	  # see above for the meaning
# This actually disables reading the header altogether
set filterslib(noradinfo) {nmd};          # use {^$} for empty

# Whether to report all the (informational) messages that the library
# may emit when processing some of the above files. A typical sequence is:
#
# Apr 25 18:10:59 genstor nbspradinfo: \
#   Invalid pdb header; maybe a zlib compressed header.
# Apr 25 18:10:59 genstor dafilter: \
#   Retrying with zlib compressed kewx_sdus34-ptaewx.252209_107856197.
# Apr 25 18:10:59 genstor dafilter: \
#  OK with zlib compressed kewx_sdus34-ptaewx.252
#
set filterslib(radinfoverbose) 0;

# Global variables of the filtererr library.
# By default the filters report errors using syslog.
# Otherwise, if usesyslog is set to 0 they will report to stderr or,
# if it is set to 2, to a logfile in the directory defined below.
# (That directory is also used by the gempak decoders).
# If errorInfo is set, then the filters print
# debuging information using the tcl errorInfo variable.
#
set common(debug)		0;
set filterserrlib(usesyslog)	1;
set filterserrlib(logdir)	"/var/log/noaaport";
set filterserrlib(errorInfo)	$common(debug);
set filterserrlib(radinfoverbose) $filterslib(radinfoverbose);

# The definitions used by the gribid library to extract information
# from the grib files (used by the dafilter, gpfilter and ldmfilter).
#
set common(filtersgribiddef) [file join $common(confdir) "filters-gribid.def"];

# Location of the external programs used by the filters.
#
set env(PATH)	 "%PATH%";
append env(PATH) ":/usr/local/bin:/usr/local/sbin";
append env(PATH) ":$common(libdir):$common(locallibdir)";
#
lappend auto_path $common(libdir) $common(locallibdir);
#
set common(nbspbindir)	"/usr/local/bin";
set common(netpbmbindir) "%NETPBMBINDIR%";
set common(innbindir) "%INNBINDIR%";

# The paths to the external programs used by the filters are
# collected in the array "filtersprogs".
#
set filtersprogs(pngtopnm)	$common(netpbmbindir)/pngtopnm;
set filtersprogs(giftopnm)	$common(netpbmbindir)/giftopnm;
set filtersprogs(pnmtojpeg)	$common(netpbmbindir)/pnmtojpeg;
set filtersprogs(ppmtogif)	$common(netpbmbindir)/ppmtogif;
set filtersprogs(pnmtopng)	$common(netpbmbindir)/pnmtopng;
set filtersprogs(innsm)		$common(innbindir)/sm;

# Gempak installation directory and bin directory of the decoders and tools.
# The settings below correspond to a Gempak installation via the gpak package.
# For a Gempak installation under /home the settings would be
#
## set gempak(homedir)	"/home/gempak/NAWIPS";
#
# gempak(libdir) is not used but it is here for completeness.
#
set gempak(homedir)	"/usr/local/lib/gempak/NAWIPS";
set gempak(bindir)	[file join $gempak(homedir) "os/%GPOSNAME%/bin"];
set gempak(libdir)	[file join $gempak(homedir) "os/%GPOSNAME%/lib"];
#
# nbspradmap and nbspsatmap (of rstfilter) call gempak programs that must
# run with the gempak env variables.
set gempak(envfile)	[file join $common(confdir) "gempak.env"];

#
# Fine-Tuning
#

# If this variable to 1 the filters (using the functions in filters.lib) will
# try to fire up as many processes in parallel as they can when they are
# processing data files. It is generally a good idea to set it in
# multiprocessor machines.
#
set filterslib(background_processing) 0;

#
# Read the local overrides
#
if {[info exists source_filters_conf_defined]} {
    return;
}
set source_filters_conf_defined 1;

set _confname $common(filtersconf);
foreach _d $common(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset -nocomplain _d;
unset -nocomplain _localconfname;
unset _confname;
