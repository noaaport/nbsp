#
# $Id$
#
# Sample configuration for the nbsp rad, text, sat filter. The commented values
# are the defaults. The filter will run without this file, but not
# without the rc file; it will be deactivated if the rc file is not found.
# The default location of this file is the directory "/usr/local/etc/nbsp".

# The library 
#
## set rstfilter(lib)	[file join $common(libdir) "rstfilter.lib"];

# The rules file and the post filter, sourced after the rules file.
#
## set rstfilter(rc)	[file join $common(confdir) "rstfilter.rc"];
## set rstfilter(prerc)	[file join $common(confdir) "rstfilterpre.rc"];
## set rstfilter(postrc) [file join $common(confdir) "rstfilterpost.rc"];

# Directories to look for local conf and rc files
#
## set rstfilter(localconfdirs)    $common(localconfdirs);

# Additional directory to look for rc files
#
## set rstfilter(rcdir)	[file join $common(rcdir) "rst"];

# Working directories
#
## set rstfilter(datadir)  [file join $common(datadir) "rst"];
## set rstfilter(tmpdir)   $common(tmpdir);

# Inventory settings
#
## set rstfilter(invdir) [file join $common(datainvdir) "rst"];
## set rstfilter(txtinvsubdir) "txt";
## set rstfilter(radinvsubdir) "rad";
## set rstfilter(satinvsubdir) "sat";
## set rstfilter(invformat) $common(datainvformat);
## set rstfilter(txt_inv_enable) 1;
## set rstfilter(rad_inv_enable) 1;
## set rstfilter(sat_inv_enable) 1;
# This is used by the ``filter_sat_img_insert_inventory'' function
## set rstfilter(sat_inv_image_types) {{"png" 0} {"gif" 0} {"jpg" 1}};

# Text files are processed by default. Special installations may configure
# this filter to process only sat and/or radar images by setting this to zero.
# (All the "regex" variables can be set to "uwildregex" expressions, as
# explained in the uwildregex.README file.)
#
## set rstfilter(txt_enable)	1;
## set rstfilter(txt_regex)	{.*};   # matched against subdirectory name
## set rstfilter(txt_fext)	".txt";
## set rstfilter(txt_dirfmt)	{$rc(station)};
## set rstfilter(txt_namefmt)	{};        # blank => use the default
#### set rstfilter(txt_namefmt)	{$rc(wmoid)_$rc(awips)_$rc(wmotime).txt};
#
## set rstfilter(txt_urgent_enable) 1;
## set rstfilter(txt_eas_enable)    1;
## set rstfilter(txt_warn_enable)   1;
## set rstfilter(txt_tsu_enable)    1;
## set rstfilter(txt_adm_enable)    1;
## set rstfilter(txt_any_enable)    1;

# Satellite images are generated by default, but this can be disabled.
# NOTE: (dec 2024) - As indicated in the original comment above,
#  we used to process the gini sat files with programs in the filterlib
#  to produce the images, without requiring gempak. Therefore, after the
#  deprecation of the gini files, this has been disabled until (if) we decide
#  to handle the nc files.
#
## set rstfilter(sat_enable)	0;
## set rstfilter(sat_regex)	\
##    {tig.(0[1-7]|13|14|15|25|39|[41-59]),tic.(0[1-7]|13|14|15|[61-65])};
## set rstfilter(sat_latest_enable)	1; # make link to latest gini and img
## set rstfilter(sat_latestname)	"latest";
## set rstfilter(sat_namefmt)	{$rc(wmoid)_$rc(ymd_hm).png};
## set rstfilter(sat_dirfmt)    {[string range $rc(wmoid) 0 2]/$rc(wmoid)};

# Options for the satellite images and their files.
# Maps are not generated by the default because that requires gempak.
# The outputsize is specified as, e.g, "1024;768"
# If it is "" then the original image size is used.
# If nothing is specified, the default (800;600) is used.
# Note that if "satmap_nopng" is set, then emwin clients will get the gif
# instead of the jpg. The gini files are created by default, so that
# if gempak cannot produce the image with the outlines,
# then nbsp tries to create the image without the outlines, using the
# gini files. If "satmap_nogini" is set to 1, then no gini files are produced
# and no images are created if gempak cannot produce the map outlines.
# The "satmap_regex" can be used to control for which
# sat images the map outlines will be generated; e.g.
#
#	set rstfilter(satmap_regex)	{tig(p02|p04|q02|q04)};
#
# (the rest will be generated without the outlines).
# The default list is the same as sat_regex above but rejecting all the
# files for which there is no entry in the imgtyp.tbl file (as of 2014-04),
# which is specified by "adding" (in the uwildmat sense) the negation
# of the string
#
# ticb17|ticb60|tice40|tici17|tici60|ticn17|ticn60|ticq17|ticq60|ticw40|tign28
#
# to the rstfilter(satmap_regex).
# The "satmap.rc" file is searched in defaults/gpmap/sat, then site/gpmap/sat.
# If "rstfilter(satmap_rcfile_fpath)" is set, then that one is used
# unconditinally and no search is done.
#
## set rstfilter(satmap_enable)	0;	   # set to 1 to add map outlines
## set rstfilter(satmap_regex)	$rstfilter(sat_regex);
## append rstfilter(satmap_regex)  {,!ticb17|ticb60|tice40|tici17|tici60} \
##    {|ticn17|ticn60|ticq17|ticq60|ticw40} \
##    {|tign28|tigi16|tigi18|tigi27|tigi28};   # have no imgtyp.tbl entry
## set rstfilter(satmap_mapsize) "800;600";
## set rstfilter(satmap_nopng)	0;         # set to 1 to keep only the gif
## set rstfilter(satmap_rcdirs)	$rstfilter(localconfdirs);
## set rstfilter(satmap_rcsubdir) [file join "gpmap" "sat"];
## set rstfilter(satmap_rcfile)	"satmap.rc";
## set rstfilter(satmap_rcfile_fpath) "";

# The radar images are not generated by default because gempak is required.
# In order to generate them, gempak must be installed, and then
# rstfilter(rad_enable) must be set to 1, and rstfilter(rad_regex)
# must be set the regular expression matching the products that should be
# processed.
# The "radmap.rc" file is searched in defaults/gpmap/rad, then site/gpmap/rad.
# If "rstfilter(radmap_rcfile_fpath)" is set, then that one is used
# unconditionally and no search is done.
#
## set rstfilter(rad_enable)	0;
## set rstfilter(rad_regex)	{^n(0|1|2|3)(p|q|r|s|u|v|z)};
## set rstfilter(rad_latest_enable)	1; # make link to latest img
## set rstfilter(rad_latestname)	"latest";
## set rstfilter(rad_namefmt)	{$rc(awips)_$rc(ymd_hm).gif};
## set rstfilter(rad_dirfmt)     	{$rc(awips2)/$rc(awips1)};
## set rstfilter(rad_mapsize)	"800;600";
## set rstfilter(radmap_rcdirs)	$rstfilter(localconfdirs);
## set rstfilter(radmap_rcsubdir) [file join "gpmap" "rad"];
## set rstfilter(radmap_rcfile)	"radmap.rc";     # or "radmap-cities.rc"
## set rstfilter(radmap_rcfile_fpath) "";

# Generation of image loops requires one of several programs available.
# The default is gifsicle, but other options are gifmerge, or convert which
# part of Image Magic. The variable rstfilter(satloop_regex) determines
# the image types for which the loop sequences are generated. The expression
# is matched against the wmoid of the file (i.e., tige01, etc) and
# the example setting below is the default is nothing is set explicitly.
#
# By default all the available individual images are included in the loop
# file. In practice the "count" variable below should be set to a value
# that excludes the oldest individual files (to avoid a clash in case the
# hourly cleanup process is running and deleting those files).
#
# See the file ``rad-sat-loop.README'' for the explanations and hints
# about the pre and post options.
#
# For example, to create an endless loop, with a 2 second delay between
# the last frame and the start of the next sequence, the following can be used
# (in the first line the character is the letter "ell", in the second
# it is the number "one")
#
#	set rstfilter(radloop_program_preoptions) {-l}
#	set rstfilter(radloop_program_postoptions) {-d 200 #-1}
#
## set rstfilter(satloop_enable)	0;
## set rstfilter(satloop_program)	"gifsicle";
## set rstfilter(satloop_program_preoptions)	{};
## set rstfilter(satloop_program_postoptions)	{};
## set rstfilter(satloop_count)		0;  # 0 means to include all images
## set rstfilter(satloop_regex)		{^tig(e02|e04|q02)};
#
## set rstfilter(radloop_enable)	0;
## set rstfilter(radloop_program)	"gifsicle";
## set rstfilter(radloop_program_preoptions)	{};
## set rstfilter(radloop_program_postoptions)	{};
## set rstfilter(radloop_count)		0;    # 0 means to include all images
## set rstfilter(radloop_regex)		$rstfilter(rad_regex);
#
# Examples
#
## set rstfilter(rad_regex) {^n0r};
## set rstfilter(rad_regex) {^(n0r|n1z)};
## set rstfilter(rad_regex) {n0rjua};
## set rstfilter(rad_regex) {(n0r|n1z)(jua|lix|fws)};
## set rstfilter(rad_regex) {(n0(r|s|v|z)|n1(p|r|s|v)|n2(r|s)|n3(r|s)|ncr|nvl|net|ntp|nvw)(jua|lix|fws)};
## set rstfilter(rad_regex) {^(n0(r|s|v|z)|n1(p|r|s|v)|n2(r|s)|n3(r|s)|ncr|nvl|net|ntp|nvw)};

# If the rst and/or emwin filters are generating radar images,
# this library calls gpmap_gif, which needs the gempak environment variables,
# and these variables are used by the relevant functions.
# The gempak env file is also needed if the rstfilter(satmap_enable)
# is set above.
#
## set rstfilter(gpenvfile)	$gempak(envfile);
## set rstfilter(gpmap_gif) 	[file join $gempak(bindir) "gpmap_gif"];
## set rstfilter(radtmpdir)        $common(tmpdir);

## The nntp postfilter if enabled.
#
## set rstfilter(nntp_enable) 0;
## set rstfilter(nntp)		[file join $common(libdir) "rstnntpfilter"];

# The rss filter
## set rstfilter(rss_enable)	1;
## set rstfilter(rss)		[file join $common(libdir) "rssfilter"];

# Work-crew configuration for rstfilter-master
## set rstfilter(slave) [file join $common(libdir) "rstfilter"];
## set rstfilter(slave,types) [list "rad" "sat" "default"];
## set rstfilter(slave,rad,ure) {_sdus[23578]};
## set rstfilter(slave,sat,ure) {_tig};
## set rstfilter(slave,default,ure) {.*};

#
# Read the local overrides
#
if {[info exists source_rstfilter_conf_defined]} {
    return;
}
set source_rstfilter_conf_defined 1;

set _confname "rstfilter.conf";
foreach _d $rstfilter(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset -nocomplain _d;
unset -nocomplain _localconfname;
unset _confname;
