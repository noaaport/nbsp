#
# $Id$
#
# Sample configuration for the nbsp rad, text, sat filter. The commented values
# are the defaults. The filter will run without this file, but not
# without the rc file; it will be deactivated if the rc file is not found.
# The default location of this file is the directory "/usr/local/etc/nbsp".

# The library 
#
## set rstfilter(lib)	[file join $common(libdir) "rstfilter.lib"];

# The rules file and the post filter, sourced after the rules file.
#
## set rstfilter(rc)	[file join $common(confdir) "rstfilter.rc"];
## set rstfilter(prerc)	[file join $common(confdir) "rstfilterpre.rc"];
## set rstfilter(postrc) [file join $common(confdir) "rstfilterpost.rc"];

# Directories to look for local conf and rc files
#
## set rstfilter(localconfdirs)    $common(localconfdirs);

# Additional directory to look for rc files
#
## set rstfilter(rcdir)	[file join $common(rcdir) "rst"];

# Working directories
#
## set rstfilter(datadir)  [file join $common(datadir) "rst"];
## set rstfilter(tmpdir)   $common(tmpdir);

# Inventory settings
#
## set rstfilter(invdir) [file join $common(datainvdir) "rst"];
## set rstfilter(txtinvsubdir) "txt";
## set rstfilter(radinvsubdir) "rad";
## set rstfilter(satinvsubdir) "sat";
## set rstfilter(invformat) $common(datainvformat);
## set rstfilter(txt_inv_enable) 1;
## set rstfilter(rad_inv_enable) 1;
## set rstfilter(sat_inv_enable) 1;
# This is used by the ``filter_sat_img_insert_inventory'' function
## set rstfilter(sat_inv_image_types) {{"png" 0} {"gif" 0} {"jpg" 1}};

# Text files are processed by default. Special installations may configure
# this filter to process only sat and/or radar images by setting this to zero.
# (All the "regex" variables can be set to "uwildregex" expressions, as
# explained in the uwildregex.README file.)
#
## set rstfilter(txt_enable)	1;
## set rstfilter(txt_regex)	{.*};   # matched against subdirectory name
## set rstfilter(txt_fext)	".txt";
## set rstfilter(txt_dirfmt)	{$rc(station)};
## set rstfilter(txt_namefmt)	{};        # blank => use the default
#### set rstfilter(txt_namefmt)	{$rc(wmoid)_$rc(awips)_$rc(wmotime).txt};
#
## set rstfilter(txt_urgent_enable) 1;
## set rstfilter(txt_eas_enable)    1;
## set rstfilter(txt_warn_enable)   1;
## set rstfilter(txt_tsu_enable)    1;
## set rstfilter(txt_adm_enable)    1;
## set rstfilter(txt_any_enable)    1;

#
# sat goesr (2024)
# GOESR images are not generated by default, but this can be enabled if desired.
# The images are generated without maps, so no external programs are required.
# (See the dafilter.init for comments regarding the namefmt)
# NOTE: The rstfilter(sat_goesr_regex) is matched against $rc(wmoid)$rc(nawips)
# that is against the wmoidppp (e.g., tire05pao). So for example, setting
#
#   set rstfilter(sat_goesr_regex) {^tire05pao};
#
# would match only the files with wmoid = tire05 and ppp = pao.
#
## set rstfilter(sat_goesr_enable)	0;
## set rstfilter(sat_goesr_regex) {^ti[rsu],!^tir[st]00}; # exclude glm
#### example: set rstfilter(sat_goesr_regex) {^tire05pao};
## set rstfilter(sat_goesr_datext)	".nc";
## set rstfilter(sat_goesr_keepnc)	0;	# 1 => keep the nc file
## set rstfilter(sat_goesr_latest_enable)	1; # make link to lattest img
## set rstfilter(sat_goesr_latestname)	"latest";
## set rstfilter(sat_goesr_namefmt) {$rc(wmoid)$rc(nawips)_$rc(ymd_hm).png};
## set rstfilter(sat_goesr_dirfmt)	\
##     {[file join [string range $rc(wmoid) 0 2] $rc(wmoid) $rc(nawips)]};

# The radar images are not generated by default because gempak is required.
# In order to generate them, gempak must be installed, and then
# rstfilter(rad_enable) must be set to 1, and rstfilter(rad_regex)
# must be set the regular expression matching the products that should be
# processed.
# The "radmap.rc" file is searched in defaults/gpmap/rad, then site/gpmap/rad.
# If "rstfilter(radmap_rcfile_fpath)" is set, then that one is used
# unconditionally and no search is done.
#
## set rstfilter(rad_enable)	0;
## set rstfilter(rad_regex)	{^n(0|1|2|3)(p|q|r|s|u|v|z)};
## set rstfilter(rad_latest_enable)	1; # make link to latest img
## set rstfilter(rad_latestname)	"latest";
## set rstfilter(rad_namefmt)	{$rc(awips)_$rc(ymd_hm).gif};
## set rstfilter(rad_dirfmt)     	{$rc(awips2)/$rc(awips1)};
## set rstfilter(rad_mapsize)	"800;600";
## set rstfilter(radmap_rcdirs)	$rstfilter(localconfdirs);
## set rstfilter(radmap_rcsubdir) [file join "gpmap" "rad"];
## set rstfilter(radmap_rcfile)	"radmap.rc";     # or "radmap-cities.rc"
## set rstfilter(radmap_rcfile_fpath) "";

# The rstfilter was used to be configurable to generate image loops.
# That has been disabled, and instead it has been relegated to
# the web (tclhttpd) interface, via the programs nbspgoesrmapc and
# nbspradmapc. They in turn can use several programs available.
# The default is gifsicle, but other options are gifmerge, or convert which
# part of Image Magic. The variables below control the behaviour
of the nbspgoesrmapc and nbspradmapc.
#
# See the file ``rad-sat-loop.README'' for the explanations and hints
# about the pre and post options.
#
# For example, to create an endless loop, with a 2 second delay between
# the last frame and the start of the next sequence, the following can be used
# (in the first line the character is the letter "ell", in the second
# it is the number "one")
#
#	set rstfilter(satloop_program_preoptions)  {-l}
#	set rstfilter(satloop_program_postoptions) {-d 200 #-1}
#
## set rstfilter(satloop_program)	"gifsicle";
## set rstfilter(satloop_program_preoptions)  {-l};         # or {} for defaults
## set rstfilter(satloop_program_postoptions) {-d 200 #-1}; # or {} for defaults
#
## set rstfilter(radloop_program)	"gifsicle";
## set rstfilter(radloop_program_preoptions)  {-l};         # or {} for defaults
## set rstfilter(radloop_program_postoptions) {-d 200 #-1}; # or {} for defaults
#
# Examples
#
## set rstfilter(rad_regex) {^n0rq;
## set rstfilter(rad_regex) {^(n0q|n1q)};
## set rstfilter(rad_regex) {n0qjua};
## set rstfilter(rad_regex) {(n0q|n1q)(jua|lix|fws)};
## set rstfilter(rad_regex) \
##   {(n0(s|v|z)|n1(p|s|v)|n2(q|s)|n3(q|s)|ncr|nvl|net|ntp|nvw)(jua|lix|fws)};
## set rstfilter(rad_regex) \
##  {^(n0(q|s|v|z)|n1(p|q|s|v)|n2(q|s)|n3(q|s)|ncr|nvl|net|ntp|nvw)};

# If the rst and/or emwin filters are generating radar images,
# this library calls gpmap_gif, which needs the gempak environment variables,
# and these variables are used by the relevant functions.
# The gempak env file is also needed if the rstfilter(satmap_enable)
# is set above.
#
## set rstfilter(gpenvfile)	$gempak(envfile);
## set rstfilter(gpmap_gif) 	[file join $gempak(bindir) "gpmap_gif"];
## set rstfilter(radtmpdir)     $common(tmpdir);

## The nntp postfilter if enabled.
#
## set rstfilter(nntp_enable) 0;
## set rstfilter(nntp)		[file join $common(libdir) "rstnntpfilter"];

# The rss filter
## set rstfilter(rss_enable)	1;
## set rstfilter(rss)		[file join $common(libdir) "rssfilter"];

# Work-crew configuration for rstfilter-master
## set rstfilter(slave) [file join $common(libdir) "rstfilter"];
## set rstfilter(slave,types) [list "rad" "sat" "default"];
## set rstfilter(slave,rad,ure) {_sdus[23578]};
## set rstfilter(slave,sat,ure) {_tig};
## set rstfilter(slave,default,ure) {.*};

#
# Read the local overrides
#
if {[info exists source_rstfilter_conf_defined]} {
    return;
}
set source_rstfilter_conf_defined 1;

set _confname "rstfilter.conf";
foreach _d $rstfilter(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset -nocomplain _d;
unset -nocomplain _localconfname;
unset _confname;
