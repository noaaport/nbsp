#
# $Id$
#

# This file is split from dafilter.tcl because some of the variables
# and functions are also used by dafilter-manager.
set dafilter(conf)	[file join $common(confdir) "dafilter.conf"];
set dafilter(rc)	[file join $common(confdir) "dafilter.rc"];
set dafilter(prerc)	[file join $common(confdir) "dafilterpre.rc"];
set dafilter(postrc)	[file join $common(confdir) "dafilterpost.rc"];
set dafilter(localconfdirs)	$common(localconfdirs);
set dafilter(rcdir)	[file join $common(rcdir) "da"];
set dafilter(localrc)	"dafilter.rc";
set dafilter(datadir)	[file join $common(datadir) "digatmos"];

## Parameters for the inventory database (for the cleanup script)
set dafilter(invdir) [file join $common(datainvdir) "digatmos"];
set dafilter(invformat) $common(datainvformat);  # format for hourly subdirs
set dafilter(radinvsubdir) "nexrad";
set dafilter(satinvsubdir) "sat";
set dafilter(rad_inv_enable) 1;
set dafilter(sat_inv_enable) 1;

##
set dafilter(nntp_enable)	0;
set dafilter(nntp_server)	"news";
set dafilter(nntp_from)		"nbspfeed@noaaport.net";
set dafilter(nntp_groupprefix)	"noaaport.data";
set dafilter(hourlyfilefmt)     "%Y%m%d%H";

##
set dafilter(sat_enable)	1;
set dafilter(sat_regex)		{.*};
set dafilter(sat_latest_enable)	1;
set dafilter(sat_latestname)	"latest";
set dafilter(satuncompress)	0;
set dafilter(sat_namefmt)	{$rc(wmoid)_${ymd_hm}.gini};
#
# goesr abd glm usually have the bbb; but not all (e.g. some titx, ticf). For
# that reason we do not use a separator as in "wmoid+bbb" but simply
# wmoidbbb to avoid having either names like "titx38+_" or having to
# use a function detect the absence of the bbb and not include the "+".
# The viirs (tip) do not have the bbb, but just in case we include it.
#
set dafilter(sat_namefmt_tip) \
    {$rc(wmoid)$rc(nawips)_${ymd_hm}.viirs};  # or .nc.gz
set dafilter(sat_namefmt_glm)	\
    {$rc(wmoid)$rc(nawips)_${ymd_hm}.glm}; # or .nc
set dafilter(sat_namefmt_goesr) \
    {$rc(wmoid)$rc(nawips)_${ymd_hm}.goesr}; # or .nc 
set dafilter(sat_dirfmt) \
    {[file join [string range $rc(wmoid) 0 2] $rc(wmoid) $rc(nawips)]};

#
# Radar: see coments in dafilter.init.in
#
set dafilter(rad_enable)	1;
set dafilter(rad_regex)		{.*};
set dafilter(rad_dirlist_enable) 1;
set dafilter(rad_dirlistname)	"list";
set dafilter(rad_dirlistlink)	"dir.list";
set dafilter(rad_latest_enable)	1;
set dafilter(rad_latestname)	"latest";
set dafilter(rad_namefmt)	{$rc(awips)_${ymd_hm}.nids};
set dafilter(rad_dirfmt)     	{$rc(awips2)/$rc(awips1)};
#
# level 2 (with contributions from Brad Holcomb <brad@w0wdx.com>)
# BEH 4/13/2010 , gr2a does not read "list", must be "dir.list"
#
set dafilter(rad2_dirlist_enable) 1;
set dafilter(rad2_dirlistname)	"list";
set dafilter(rad2_dirlistlink)	"dir.list";
set dafilter(rad2_latest_enable) 1;
set dafilter(rad2_latestname)	"latest";
set dafilter(rad2_namefmt)	{$rc(STATION)_${ymd_hm}};   
set dafilter(rad2_dirfmt)     	{$rc(STATION)};
#
set dafilter(grib_enable)	1;
set dafilter(grib_regex)	{.*};
set dafilter(gribfext)		".grb";
#
set dafilter(file_enable)	1;
set dafilter(file_regex)	{.*};
#
set dafilter(unprocessed_enable) 0;		# store unprocessed files
set dafilter(aloft_csv_enable)   0;		# create the aloft csv files

# Work-crew configuration
set dafilter(slave) [file join $common(libdir) "dafilter"];
set dafilter(slave,types) [list "rad" "sat" "grib" "default"];
set dafilter(slave,rad,ure) {_sdus[2-8]};  # 4 and 6 are status msgs
set dafilter(slave,sat,ure) {_tig};
set dafilter(slave,grib,ure) {\+grib};
set dafilter(slave,default,ure) {.*};
#

@dainit-nntp@

## The configuration file that overrides the defaults, if it exists.
if {[file exists $dafilter(conf)] == 1} {
    source $dafilter(conf);
}

#
# Variables
#
# dafilter(manager) is set to 1 in the manager, or 0 in the slave
# or in standalone mode.
#
set dafilter(nntp_time)		0;
set dafilter(manager)		0;

#
# Functions to support the nntp gateway
#
proc dafilter_nntp_time_reset {} {
#
# This function returns the time corresponding to the next hour.
#
    set now [clock seconds];
    scan [clock format $now -format "%M"] "%d" current_minute;
    
    return [expr $now - ($current_minute * 60) + 3600];
}

proc dafilter_nntp {} {

    global dafilter;

    if {$dafilter(nntp_enable) == 0} {
	return;
    }

    set scheduled_time $dafilter(nntp_time);
    set now [clock seconds];
    if {$now < $scheduled_time} {
	return;
    }
    # Reset it for the next time
    set dafilter(nntp_time)	[dafilter_nntp_time_reset];

    # Get the root of the names of the data files
    set now [expr $now - 3600];
    set filename_root \
	[clock format $now -gmt true -format $dafilter(hourlyfilefmt)];

    # For every (enabled) data group, look for the file with this root name
    # in the corresponding subdirectory, and send it to the news server.
    foreach key [array names dafilter] {
	if {[regexp {^nntp_enable,} $key] == 0} {
	    continue;
	}
	if {$dafilter($key) != 1} {
	    continue;
	}

	set subgroup [lindex [split $key ","] 1];
	regsub -all {\.} $subgroup "/" subdir;

	set fpathpatt [file join $dafilter(datadir) $subdir $filename_root];
	set flist [glob -nocomplain -tails -path $fpathpatt "*"];
	foreach filename $flist {
       	    dafilter_nntp_now $subdir $filename $subgroup;
	}
    }
}

proc dafilter_nntp_now {subdir filename subgroup} {

    global dafilter;

    if {$dafilter(nntp_enable) == 0} {
	return;
    }

    set fpath [file join $dafilter(datadir) $subdir $filename];
    set newsgroup "$dafilter(nntp_groupprefix).$subgroup";
    set subject $filename;
    set uuencode_flag 1;

    set status [catch {
	exec nbspnntpsend $dafilter(nntp_server) \
	     $dafilter(nntp_from) $newsgroup $subject $fpath $uuencode_flag;
    } errmsg];

    if {$status != 0} {
	log_msg $errmsg;
    }
}
