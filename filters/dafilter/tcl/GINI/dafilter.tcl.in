#!%TCLSH%
#
# $Id$
#
package require cmdline;

set usage {dafilter [-s]};
set optlist {{s}};

## The common defaults initialization
set filters_init_file "/usr/local/libexec/nbsp/filters.init";
if {[file exists $filters_init_file] == 0} {
	puts "dafilter disabled: $filters_init_file not found.";
	return 1;
}
source $filters_init_file;
unset filters_init_file;

if {$filters_init_status == 1} {
	return 1;
}
unset filters_init_status;

## This filter is archive-aware
set initfile [file join $common(libdir) "archive.init"];
if {[file exists $initfile] == 0} {
        puts "dafilter disabled: $initfile not found.";
        return 1;
}
source $initfile;

## The initialization of this filter.
set initfile [file join $common(libdir) "dafilter.init"];
if {[file exists $initfile] == 0} {
        puts "dafilter disabled: $initfile not found.";
        return 1;
}
source $initfile;

#
# Variables of this filter
#
set dafilter(rcfiles)		[list];
set dafilter(ccbsaved)		$common(ccbsaved);
set dafilter(ccbsize)		$common(ccbsize);
set dafilter(ccbwmoawipssize) [expr $common(ccbsize) + $common(wmoawips_size)];
#
set dafilter(condition)		[list];
set dafilter(action)		[list];
#
# Default is to run as master unless "-s" is given.
set dafilter(option_s)		0;
#

# The archive variables
#
# If the archive is enabled, the next three variables are reset according
# to the current date: the wmo header or file data for archive_subdir;
# the arrival time for the inv subdir and name. In addition, we copy
# each archive(da,xxx) variable to dafilter(archive_xxx) for easy reference
# in the functions here.
#
set dafilter(archive_subdir) "";
set dafilter(archive_inv_subdir) "";
set dafilter(archive_inv_name) "";
foreach key [array names archive "da,*"] {
    set k [string range $key 3 end];
    set dafilter(archive_${k}) $archive($key);
}

# The main rc file is required
if {[file exists $dafilter(rc)] == 0} {
    log_msg "Filter disabled: $dafilter(rc) not found.";
    return 1;
}

# Build the list of rc files
set dafilter(rcfiles) [filterlib_get_rcfiles $dafilter(localrc) \
	$dafilter(localconfdirs) $dafilter(rcdir) \
	$dafilter(prerc) $dafilter(postrc)];

# Load the rules sets
source $dafilter(rc);

#
# dafilter library
#
@dalib@

#
# main function
#
proc main {argc argv} {

    global dafilter;
    global errorInfo;

    cd $dafilter(datadir);

    # gets returns -1 on eof. In addition the server explicitly
    # signals the filters to quit by sending a blankline
    # (gets returns 0 in this case, and finfo is "").

    while {[gets stdin finfo] >= 0} {
	if {$finfo == ""} {
	    log_msg "Received request to quit.";
	    break;
	}

	set status [catch {process $finfo} errmsg];
	if {$status == 1} {
	    log_msg "Error processing $finfo";
	    log_msg $errmsg;
	    log_msg $errorInfo;
	}

	dafilter_periodic;
    }
}

proc process {finfo} {

    global dafilter;

    set _cmd [list filterlib_get_rcvars rc $finfo];

    # If grib is enable, extract the rc(gribxxx) parameters
    if {([info exists dafilter(grib_enable)] == 0) || \
	($dafilter(grib_enable) != 0)} {
	lappend _cmd "-dogrib";
    }

    # If rad is enable, extract the rc(radxxx) parameters
    if {([info exists dafilter(rad_enable)] == 0) || \
	($dafilter(rad_enable) != 0)} {
	lappend _cmd "-dorad";
    }

    # If sat is enable, extract the rc(satxxx) parameters
    if {([info exists dafilter(sat_enable)] == 0) || \
	($dafilter(sat_enable) != 0)} {
	lappend _cmd "-dosat";
    }

    eval ${_cmd};

    set dafilter(archive_subdir) [clock format $rc(seconds) -format \
	$dafilter(archive_subdirfmt) -gmt true];

    # If we want the inventory names to be based on the arrival time, then
    # use
    #
    # set invseconds [clock seconds];
    #
    set invseconds $rc(seconds);
    set dafilter(archive_inv_subdir) [clock format $invseconds -format \
	$dafilter(archive_inv_subdirfmt) -gmt true];
    set dafilter(archive_inv_name) [clock format $invseconds -format \
	$dafilter(archive_inv_namefmt) -gmt true];
    unset invseconds;

    # These variables are based on the time determined by the filterlib
    # The default is the wmotime, except when the data file gives a true time,
    # for example radar and sat files.
    set ymd_hm $rc(ymd_hm);
    set ymdhm $rc(ymdhm);
    set ymd_h $rc(ymd_h);
    set ymdh $rc(ymdh);
    set ymd $rc(ymd);
    set ym $rc(ym);
    set yyyy $rc(yyyy);

    set rc_status 1;

    # Evaluate the condition/action pairs, from all sets.
    set i 0;		# counts the sets
    foreach condlist $dafilter(condition) {
        set actionlist [lindex $dafilter(action) $i];
	set j 0;	# counts the rules with each set
	foreach c $condlist {
	    set a [lindex $actionlist $j];
            if {[expr $c]} {
                eval $a;
            }
	    incr j;
        }
        incr i;
    }
}

#
# main
#
array set option [::cmdline::getoptions argv $optlist $usage];
set argc [llength $argv];

# Check if invoked as a slave worker
if {$option(s) == 1} {
    set dafilter(option_s) 1;
}

main $argc $argv;
