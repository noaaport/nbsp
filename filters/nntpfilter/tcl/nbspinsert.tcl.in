#!%TCLSH%
#
# $Id$
#
#
# Usage: nbspinsert -i [-f nbspinfifo] [-l lockfile] finfo < file
#	 nbspinsert [-f nbspinfifo] [-l lockfile] finfo
#	 nbspinsert [-f nbspinfifo] [-l lockfile] < file_with_finfolist
# where
#
# finfo = seq type cat code npchidx fname fpath
#
# In the first form, it will save the data in fpath, and then process the
# file. In the second form, it assumes that the data is already in fpath.
# The third form is like the second one, but it takes a list of finfo
# on stdin (like a filter does). In all cases, the fpath should be a
# "spool file" path, that is, a path to a file in the spool directory with
# the usual convention used by nbsp.
#
# If [-f] is not given to specify the location of the nbspd.infifo file,
# then the nbsp configuration files are read.
#
# NOTE:  In this mode the Nbsp processor is not invoked and the files
#        that are saved in the spool directory by the caller of this script,
#        or by this script itself, are not inserted by the spooldb that
#        handles the deletion of the spooled files. Therefore the files
#        that are sent to Nbsp by this script must be deleted from the spool
#        by the caller of this script, or by the cleanup scheduler.
#        The latter is set automaticaly by the default hourly-cleanup.conf,
#        but the files written by this script must be writable by the
#        nbsp user (noaaport:noaaport) so that they can be deleted by the
#        default cleanup process.
#
#        For more general instructions see the file "nbspinsert.README".
#        For an example of how to use this script see the "craftinsert" script
#        and "craftinsert.README".
#
package require cmdline;
package require Tclx; # flock (see proc sendtof)

set usage {
nbspinsert -i [-f nbspinfifo] seq type cat code npchidx fname fpath < file
nbspinsert [-f nbspinfifo] seq type cat code npchidx fname fpath
nbspinsert [-f nbspinfifo] < finfolist
};

#
# global variables
#
set FIFO "";
set LOCK "";
set nbspinfifo "";   # option(f) or configuration file
set nbspinlock_ext ".lock";
set nbspinlock "";   # set to ${nbspinfifo}${nbspinlock_ext}
#
set optlist {i {f.arg ""}};
array set option [::cmdline::getoptions argv $optlist $usage];
set argc [llength $argv];

#
# get configuration
#
if {$option(f) ne ""} {
    set nbspinfifo $option(f);
} else {
    ## The common defaults
    set _defaultsfile "/usr/local/etc/nbsp/filters.conf";
    if {[file exists ${_defaultsfile}] == 0} {
	puts "${_defaultsfile} not found.";
	return 1;
    }
    source ${_defaultsfile};
    unset _defaultsfile;

    # nbspd.init is needed to get the fifo
    set nbspd_init_file [file join $common(libdir) nbspd.init];
    if {[file exists $nbspd_init_file] == 0} {
	puts "$nbspd_init_file not found.";
	return 1;
    }
    source $nbspd_init_file;
    unset nbspd_init_file;

    set nbspinfifo $nbspd(infeedfifo);
}

append nbspinlock $nbspinfifo $nbspinlock_ext;

proc err_msg {s} {

    global argv0;

    set name [file tail $argv0];

    puts stderr "$name: $s";
    exec logger -t $name $s;
}

proc err {s} {

    err_msg $s;

    exit 1;
}

proc open_fifo {} {

    global FIFO nbspinfifo;

    if {[file exists $nbspinfifo] == 0} {
	err "$nbspinfifo not found.";
    }

    set status [catch {
	set FIFO [open $nbspinfifo {WRONLY NONBLOCK}];
	fconfigure $FIFO -translation binary -encoding binary;
    } errmsg];
    
    if {$status != 0} {
	err $errmsg;
    }

    set status [catch {
	open_lock;
    } errmsg];

    if {$status != 0} {
	close_fifo;
	err $errmsg;
    }

    return $status;
}

proc close_fifo {} {

    global FIFO;

    set status [catch {close $FIFO} errmsg];
    if {$status != 0} {
        err_msg $errmsg;
    }

    set status [catch {close_lock} errmsg]
    if {$status != 0} {
        err_msg $errmsg;
    }
    
   return $status;
}

proc open_lock {} {

    global LOCK nbspinlock;

    set status [catch {
	set LOCK [open $nbspinlock {WRONLY CREAT NONBLOCK}]
    } errmsg];

    if {$status != 0} {
	return -code error "Could not open $nbspinlock";
    }

    return $status;
}

proc close_lock {} {

    global LOCK nbspinlock;

    set status [catch {
	close $LOCK;
    } errmsg];

    if {$status != 0} {
	return -code error "Could not close $nbspinlock";
    }

    return $status;
}

proc infeed_lock {} {

    global LOCK nbspinlock;
    
    set status [catch {
	flock -write $LOCK;
    } errmsg];

    if {$status != 0} {
	return -code error "Could not lock $nbspinlock";
    }

    return $status;
}

proc infeed_unlock {} {

    global LOCK nbspinlock;
    
    set status [catch {
	funlock $LOCK;
    } errmsg];

    if {$status != 0} {
	return -code error "Could not unlock $nbspinlock";
    }

    return $status;
}


proc process {finfo} {

    global option nbspinfifo;

   if {[llength [split $finfo]] != 7} {
	return -code error "Not enough arguments: $finfo.";
   }

    if {$option(i) == 1} {
        save_fpath $finfo;
    }

    set status [catch {
	sendtof $finfo;
    } errmsg];
    
    if {($status != 0) && ($option(i) == 1)} {
	delete_fpath $finfo;
    }

    if {$status != 0} {
       return -code error $errmsg;
    }
}

proc save_fpath {finfo} {

    scan $finfo "%u %d %d %d %d %s %s" seq type cat code npchidx fname fpath;
    set fbasename [file tail $fpath];
    set fdirname [file dirname $fpath];
    set spooldir [file dirname $fdirname];

    if {[file isdirectory $spooldir] == 0} {
	return -code error "Directory $spooldir does not exist.";
    }

    set status [catch {
	if {[file isdirectory $fdirname] == 0} {
	    file mkdir $fdirname;
	}
	fconfigure stdin -translation binary -encoding binary;
	set fout [open $fpath w];
	fconfigure $fout -translation binary -encoding binary;
	puts -nonewline $fout [read stdin];
    } errmsg];

    if {[info exists fout]} {
	catch {close $fout};
    }

    if {$status != 0} {
	file delete $fpath;
	return -code error $errmsg;
    }
}

proc delete_fpath {finfo} {

    scan $finfo "%u %d %d %d %d %s %s" seq type cat code npchidx fname fpath;

    file delete $fpath;
}

proc sendtof {finfo} {

    global FIFO nbspinfifo;
    
    # flock and -buffering none was added (jun2018) to support the case
    # in which several external programs are inserting files in nbsp, like
    # ldm (craftinsert) and npemwin (nbspfilter).
    #
    # This was revised (july2022) for two reasons: (1) In FreeBSD
    # flock() does not work on a fifo (see the folder nbspinsert
    # in dev-notes for some notes on this; (2) it is more efficient
    # (when processing a list of finfo obtained from stdin) to open
    # the fifo once at the begining, and closing at the end,
    # than opening and closing in every iteration. In the most
    # common case, in which nbspinsert is called with just one argument
    # it is the same thing, but in principle this is how it should be
    # done.

    set status [catch {
	#set FIFO [open $nbspinfifo {WRONLY}]
	#flock -write $FIFO;
	#fconfigure $FIFO -translation binary -encoding binary -buffering none;
	set finfo_size [string length $finfo];
	infeed_lock;
	puts -nonewline $FIFO [binary format "I" $finfo_size];
	puts $FIFO $finfo;
	infeed_unlock;
    } errmsg];
    
    #if {[info exists FIFO]} {
    #   catch {close $FIFO};
    #}
    
    if {$status != 0} {
	return -code error $errmsg;
    }
}

proc process_finfo_list {} {

    global nbspinfifo;

    set status 0;

    while {[gets stdin finfo] >= 0} {
        if {$finfo eq ""} {
	    continue;
        }

	process $finfo;
    }
}

#
# main
#

set status [open_fifo];

if {$status != 0} {
    return 1;
}

if {$argc == 0} {
    set status [catch {process_finfo_list} errmsg];   
} else {
    set finfo [join $argv " "];
    set status [catch {process $finfo} errmsg];
}

close_fifo;

if {$status != 0} {
    err $errmsg;
}
