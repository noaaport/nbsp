#
# $Id$
#

#
# Parameters for the inventory database (for the cleanup script)
#
set gisfilter(invdir) [file join $common(datainvdir) "gis"];
set gisfilter(invformat) $common(datainvformat);  # format for hourly subdirs
set gisfilter(radinvsubdir) "rad";
set gisfilter(satinvsubdir) "sat";
set gisfilter(rad_inv_enable) 1;
set gisfilter(sat_inv_enable) 1;

#
# sat goesr configuration
#
set gisfilter(sat_enable) 1;  # whether to process the ti(r|s|u) files
set gisfilter(sat_regex)  {^ti(r|s|u),!^tir(s|t)00}; # exclude glm
## same as set gisfilter(sat_regex)  {^ti[rsu],!^tir[st]00};
set gisfilter(sat_latest_enable)        1; # make link to latest
set gisfilter(sat_latestname)   "latest";   # without the extension
set gisfilter(sat_namefmt) \
    {$rc(wmoid)$rc(nawips)_$rc(ymd_hm)}; # without the ext
set gisfilter(sat_subdirfmt) \
    {[file join [string range $rc(wmoid) 0 2] $rc(wmoid) $rc(nawips)]};
#
set gisfilter(sat_outputfile_namefmt,goesr) "$gisfilter(sat_namefmt).goesr";
set gisfilter(sat_outputfile_dirfmt,goesr) \
    "sat/goesr/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,shp) "$gisfilter(sat_namefmt).shp";
set gisfilter(sat_outputfile_dirfmt,shp) "sat/shp/$gisfilter(sat_subdirfmt)";
set gisfilter(sat_outputfile_namefmt,shx) "$gisfilter(sat_namefmt).shx";
set gisfilter(sat_outputfile_dirfmt,shx) "sat/shp/$gisfilter(sat_subdirfmt)";
set gisfilter(sat_outputfile_namefmt,dbf) "$gisfilter(sat_namefmt).dbf";
set gisfilter(sat_outputfile_dirfmt,dbf) "sat/shp/$gisfilter(sat_subdirfmt)";
set gisfilter(sat_outputfile_namefmt,info) "$gisfilter(sat_namefmt).info";
set gisfilter(sat_outputfile_dirfmt,info) "sat/shp/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,csv) "$gisfilter(sat_namefmt).csv";
set gisfilter(sat_outputfile_dirfmt,csv) "sat/csv/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,asc) "$gisfilter(sat_namefmt).asc";
set gisfilter(sat_outputfile_dirfmt,asc) "sat/asc/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,tif) "$gisfilter(sat_namefmt).tif";
set gisfilter(sat_outputfile_dirfmt,tif) "sat/tif/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,nc) "$gisfilter(sat_namefmt).nc";
set gisfilter(sat_outputfile_dirfmt,nc) "sat/nc/$gisfilter(sat_subdirfmt)";
#
#
set gisfilter(sat_outputfile_namefmt,wkt) "$gisfilter(sat_namefmt).wkt";
set gisfilter(sat_outputfile_dirfmt,wkt) "sat/wkt/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_bundlelist) [list];
set gisfilter(sat_bundlelist_seqnum) 0;

# Bundles are of the form
#
## set gisfilter(sat_bundle,<tag>,regex) {tir(e|a)};  # matched against wmoid
## set gisfilter(sat_bundle,<tag>,fmt) [list shp shx dbf info ...];
#
# One example
#
## set gisfilter(sat_bundle,<tag>,regex) {tir(e|a)};  # matched against wmoid
## set gisfilter(sat_bundle,<tag>,fmt) "asc";
#
# They should be defined via the "bundle" functions
# (see the file "defaults/gisfilter-bundle.conf")
#

#
# rad configuration
#

# The setting of "rad_awips1_regex" below ensures that only the files
# that nbspradgis can process are accepted by this filter.
# (See the notes in the gisfilter/dev-notes directory).
#
set gisfilter(rad_enable) 1;
set gisfilter(rad_wmoid_regex)  {sdus[23578]};
set gisfilter(rad_awips1_regex) \
    {n0(q|s|u)|n1(p|q|s|u)|n2(q|s|u)|n3(q|s|u)|na(q|u)|nb(q|u)|ntp};
set gisfilter(rad_latest_enable) 1; # make link to latest
set gisfilter(rad_latestname)    "latest";
set gisfilter(rad_namefmt)       {$rc(awips)_$rc(ymd_hm)}; # without extension
set gisfilter(rad_subdirfmt)     {$rc(awips2)/$rc(awips1)};
##
# set gisfilter(rad_outputfile_namefmt,nids) \
#     {$rc(STATION)_$rc(WMOID)_$rc(AWIPS)_$rc(ymdhm)};  # for WCT
##
set gisfilter(rad_outputfile_namefmt,nids) "$gisfilter(rad_namefmt).nids";
set gisfilter(rad_outputfile_dirfmt,nids) "rad/nids/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,shp) "$gisfilter(rad_namefmt).shp";
set gisfilter(rad_outputfile_dirfmt,shp) "rad/shp/$gisfilter(rad_subdirfmt)";
set gisfilter(rad_outputfile_namefmt,shx) "$gisfilter(rad_namefmt).shx";
set gisfilter(rad_outputfile_dirfmt,shx) "rad/shp/$gisfilter(rad_subdirfmt)";
set gisfilter(rad_outputfile_namefmt,dbf) "$gisfilter(rad_namefmt).dbf";
set gisfilter(rad_outputfile_dirfmt,dbf) "rad/shp/$gisfilter(rad_subdirfmt)";
set gisfilter(rad_outputfile_namefmt,info) "$gisfilter(rad_namefmt).info";
set gisfilter(rad_outputfile_dirfmt,info) "rad/shp/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,csv) "$gisfilter(rad_namefmt).csv";
set gisfilter(rad_outputfile_dirfmt,csv) "rad/csv/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,asc) "$gisfilter(rad_namefmt).asc";
set gisfilter(rad_outputfile_dirfmt,asc) "rad/asc/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,tif) "$gisfilter(rad_namefmt).tif";
set gisfilter(rad_outputfile_dirfmt,tif) "rad/tif/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,nc) "$gisfilter(rad_namefmt).nc";
set gisfilter(rad_outputfile_dirfmt,nc) "rad/nc/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,wkt) "$gisfilter(rad_namefmt).wkt";
set gisfilter(rad_outputfile_dirfmt,wkt) "rad/wkt/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_bundlelist) [list];
set gisfilter(rad_bundlelist_seqnum) 0;
#
# Comments similar to those of the sat bundles above apply here.
#

#
# rad2
#
set gisfilter(rad2_enable) 0;
set gisfilter(rad2_regex)  {level2};  # wmoid
set gisfilter(rad2_latest_enable)        1; # make link to latest
set gisfilter(rad2_latestname)   "sn.last";
set gisfilter(rad2_namefmt)      {$rc(STATION)_$rc(ymd_hm)};
set gisfilter(rad2_subdirfmt)    {$rc(STATION)};
#
set gisfilter(rad2_outputfile_namefmt,nids) $gisfilter(rad2_namefmt);
set gisfilter(rad2_outputfile_dirfmt,nids) \
	"rad2/nids/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,shp) "$gisfilter(rad2_namefmt).shp";
set gisfilter(rad2_outputfile_dirfmt,shp) \
	"rad2/shp/$gisfilter(rad2_subdirfmt)";
set gisfilter(rad2_outputfile_namefmt,shx) "$gisfilter(rad2_namefmt).shx";
set gisfilter(rad2_outputfile_dirfmt,shx) \
	"rad2/shp/$gisfilter(rad2_subdirfmt)";
set gisfilter(rad2_outputfile_namefmt,dbf) "$gisfilter(rad2_namefmt).dbf";
set gisfilter(rad2_outputfile_dirfmt,dbf) \
	"rad2/shp/$gisfilter(rad2_subdirfmt)";
set gisfilter(rad2_outputfile_namefmt,info) "$gisfilter(rad2_namefmt).info";
set gisfilter(rad2_outputfile_dirfmt,info) \
	"rad2/shp/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,csv) "$gisfilter(rad2_namefmt).csv";
set gisfilter(rad2_outputfile_dirfmt,csv) \
	"rad2/csv/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,tif) "$gisfilter(rad2_namefmt).tif";
set gisfilter(rad2_outputfile_dirfmt,tif) \
	"rad2/tif/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,nc) "$gisfilter(rad2_namefmt).nc";
set gisfilter(rad2_outputfile_dirfmt,nc) "rad2/nc/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,asc) "$gisfilter(rad2_namefmt).asc";
set gisfilter(rad2_outputfile_dirfmt,asc) \
	"rad2/asc/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,wkt) "$gisfilter(rad2_namefmt).wkt";
set gisfilter(rad2_outputfile_dirfmt,wkt) \
	"rad2/wkt/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_bundlelist) [list];
set gisfilter(rad2_bundlelist_seqnum) 0;

# The local overrides
if {[file exists $gisfilter(conf)]} {
    source $gisfilter(conf);
}

#
# Bundle configuration functions
#
proc _bundle_add {type regex fmt} {
#
# type = rad|sat
# fmt = "shp,shx,..."
# regex = matched against: awips(rad), wmoid(sat), site(level2)
#
    global gisfilter;

    append bundle_type $type "_bundle";
    append bundle_list $type "_bundlelist";

    set seqnum $gisfilter(${type}_bundlelist_seqnum);
    incr gisfilter(${type}_bundlelist_seqnum);

    # Construct a unique tag
    set bundle_name [join [list $type $seqnum] "."];

    lappend gisfilter($bundle_list) $bundle_name;
    set gisfilter($bundle_type,$bundle_name,fmt) [split $fmt ","];
    set gisfilter($bundle_type,$bundle_name,regex) $regex;
}

proc _bundle_clear {type} {

    global gisfilter;

    append bundlelist $type "_bundlelist";

    set gisfilter($bundlelist) [list];
}

proc sat_bundle_add {regex {fmt "shp,shx,dbf,info"}} {

    _bundle_add "sat" $regex $fmt;
}

proc sat_bundle_clear {} {

    _bundle_clear "sat";
}

proc rad_bundle_add {regex {fmt "shp,shx,dbf,info"}} {

    _bundle_add "rad" $regex $fmt;
}

proc rad_bundle_clear {} {

    _bundle_clear "rad";
}

#
# Examples
#
# If fmt is not specified, then defaults to "shp,shx,dbf,info"
#

#
# sat goesr examples
#
# sat_bundle_add {^ti(r|s|u),!tir(s|t)00}; # defaults to "shp,shx,dbf,info"
# sat_bundle_add {^ti(r|s|u),!tir(s|t)00} "shp,shx,dbf,info,csv,asc";
# sat_bundle_add {^ti(r|s|u),!tir(s|t)00} "asc";

#
# rad examples
#
# rad_bundle_add {n0q} "csv";
# rad_bundle_add {n[0-3](q|s|u)jua}; # "shp,shx,dbf,info,csv";

#
# Dynamic initialization
#

# Read the bundle configurations
if {[file exists $gisfilter(bundle_conf)]} {
    source $gisfilter(bundle_conf);
}
