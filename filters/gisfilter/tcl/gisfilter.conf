#
# $Id$
#

### set gisfilter(localconfdirs)  $common(localconfdirs);
### set gisfilter(datadir) [file join $common(datadir) "gis"];
### set gisfilter(bundle_conf) [file join $common(confdir) \
###	"gisfilter-bundle.conf"];

#
# Parameters for the inventory database (for the cleanup script)
#
### set gisfilter(invdir) [file join $common(datainvdir) "gis"];
### set gisfilter(invformat) $common(datainvformat); # format forhourly subdirs
### set gisfilter(radinvsubdir) "rad";
### set gisfilter(satinvsubdir) "sat";
### set gisfilter(rad_inv_enable) 1;
### set gisfilter(sat_inv_enable) 1;

#
# nbspgismap parameters
#
### set gisfilter(gismap_bundle_conf) [file join $common(confdir) \
###	"gismap-bundle.conf"];
### set gisfilter(gismap_datadir) $gisfilter(datadir);
### set gisfilter(gismap_mapdirs) $gisfilter(localconfdirs); 
### set gisfilter(gismap_mapsubdir) [file join "gis" "map"];
### set gisfilter(gismap_geodata_dirname) "geodata";
### set gisfilter(gismap_geodata_dirs) $common(localsharedirs);
### set gisfilter(gismap_geodata_dir) ""; # If unset, use std dirs above
### set gisfilter(gismap_mapfonts_dirname) "mapfonts";
### set gisfilter(gismap_mapfonts_dirs) $common(localsharedirs);
### set gisfilter(gismap_mapfonts_dir) ""; # If unset, use std dirs above

#
# scheduler parameters
#
### set gisfilter(scheduler_enable) 0;
### set gisfilter(schedule) [file join $common(confdir) \
###                         "gisfilter-schedule.rc"];
### set gisfilter(schedule_run_period) "minutely";

#
# sat goesr configuration
#
### set gisfilter(sat_enable) 1;  # whether to process the ti(r|s|u) files
### set gisfilter(sat_regex)  {^ti(r|s|u),!^tir(s|t)00}; # exclude glm
### set gisfilter(sat_latest_enable)        1; # make link to latest
### set gisfilter(sat_latestname)   "latest";   # without the extension
### set gisfilter(sat_namefmt) \
###     {$rc(wmoid)$rc(nawips)_$rc(ymd_hm)}; # without the ext
### set gisfilter(sat_subdirfmt) \
###     {[file join [string range $rc(wmoid) 0 2] $rc(wmoid) $rc(nawips)]};
#
### set gisfilter(sat_outputfile_namefmt,goesr) "$gisfilter(sat_namefmt).goesr";
### set gisfilter(sat_outputfile_dirfmt,goesr) \
###	"sat/goesr/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_outputfile_namefmt,shp) "$gisfilter(sat_namefmt).shp";
### set gisfilter(sat_outputfile_dirfmt,shp) \
###     "sat/shp/$gisfilter(sat_subdirfmt)";
### set gisfilter(sat_outputfile_namefmt,shx) "$gisfilter(sat_namefmt).shx";
### set gisfilter(sat_outputfile_dirfmt,shx) \
###      "sat/shp/$gisfilter(sat_subdirfmt)";
### set gisfilter(sat_outputfile_namefmt,dbf) "$gisfilter(sat_namefmt).dbf";
### set gisfilter(sat_outputfile_dirfmt,dbf) \
###     "sat/shp/$gisfilter(sat_subdirfmt)";
### set gisfilter(sat_outputfile_namefmt,info) "$gisfilter(sat_namefmt).info";
### set gisfilter(sat_outputfile_dirfmt,info) \
###     "sat/shp/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_outputfile_namefmt,csv) "$gisfilter(sat_namefmt).csv";
### set gisfilter(sat_outputfile_dirfmt,csv) \
###     "sat/csv/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_outputfile_namefmt,asc) "$gisfilter(sat_namefmt).asc";
### set gisfilter(sat_outputfile_dirfmt,asc) \
###     "sat/asc/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_bundlelist) [list];	# list of tags
#
# Bundles are of the form
#
## set gisfilter(sat_bundle,<tag>,regex) {tir(e|a)};  # matched against wmoid
## set gisfilter(sat_bundle,<tag>,fmt) [list shp shx dbf info ...];
#
# One example
#
## set gisfilter(sat_bundle,<tag>,regex) {tir(e|a)};  # matched against wmoid
## set gisfilter(sat_bundle,<tag>,fmt) "asc";
#
# They should be defined via the "bundle" functions
# (see the file "defaults/gisfilter-bundle.conf")
#

#
# rad configuration
#
# It seems that WCT is very, very picky about the name of the input
# radar file; it must be one of two forms:
#
#   sn.NNNN     (and it depends on the number of N's)
#   TJSJ_SDUS52_N0RJUA_200809220154
#
# So, we use the second version for the nids (which will be the input files
# to WCT), while for the other types we use a naming
# convention similar to what is used by the dafilter.
#
# The setting of "rad_awips1_regex" below ensures that only the files
# that nbspradgis can process are accepted by this filter.
# (See the notes in the gisfilter/dev-notes directory).
# 
### set gisfilter(rad_enable) 1;
### set gisfilter(rad_wmoid_regex)  {sdus[23578]};
### set gisfilter(rad_awips1_regex) \
##    {n0(q|s|u)|n1(p|q|s|u)|n2(q|s|u)|n3(q|s|u)|na(q|u)|nb(q|u)|ntp};
### set gisfilter(rad_latest_enable)        1; # make link to latest
### set gisfilter(rad_latestname)   "latest";  # withput the extension
### set gisfilter(rad_namefmt)    {$rc(awips)_$rc(ymd_hm)}; # without extension
### set gisfilter(rad_subdirfmt)  {$rc(awips2)/$rc(awips1)}; 
#
### set gisfilter(rad_outputfile_namefmt,nids) \
###	{$rc(STATION)_$rc(WMOID)_$rc(AWIPS)_$rc(ymdhm)};
### set gisfilter(rad_outputfile_dirfmt,nids) \
###	"rad/nids/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_outputfile_namefmt,shp) "$gisfilter(rad_namefmt).shp";
### set gisfilter(rad_outputfile_dirfmt,shp) \
###      "rad/shp/$gisfilter(rad_subdirfmt)";
### set gisfilter(rad_outputfile_namefmt,shx) "$gisfilter(rad_namefmt).shx";
### set gisfilter(rad_outputfile_dirfmt,shx) \
###     "rad/shp/$gisfilter(rad_subdirfmt)";
### set gisfilter(rad_outputfile_namefmt,dbf) "$gisfilter(rad_namefmt).dbf";
### set gisfilter(rad_outputfile_dirfmt,dbf) \
###     "rad/shp/$gisfilter(rad_subdirfmt)";
### set gisfilter(rad_outputfile_namefmt,info) "$gisfilter(rad_namefmt).info";
### set gisfilter(rad_outputfile_dirfmt,info) \
###     "rad/shp/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_outputfile_namefmt,csv) "$gisfilter(rad_namefmt).csv";
### set gisfilter(rad_outputfile_dirfmt,csv) \
###	"rad/csv/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_bundlelist) [list];
#
# Comments similar to those of the sat bundles above apply here.
#

#
# rad2 (not implemented yet)
#
### set gisfilter(rad2_enable) 0;
### set gisfilter(rad2_regex)  {level2};  # wmoid
### set gisfilter(rad2_latest_enable)        1; # make link to latest
### set gisfilter(rad2_latestname)   "sn.last";
### set gisfilter(rad2_namefmt)      {$rc(STATION)_$rc(ymd_hm)};
### set gisfilter(rad2_subdirfmt)    {$rc(STATION)};
#
### set gisfilter(rad2_outputfile_namefmt,nids) $gisfilter(rad2_namefmt);
### set gisfilter(rad2_outputfile_dirfmt,nids) \
###	"rad2/nids/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,shp) "$gisfilter(rad2_namefmt).shp";
### set gisfilter(rad2_outputfile_dirfmt,shp) \
###	"rad2/shp/$gisfilter(rad2_subdirfmt)";
### set gisfilter(rad2_outputfile_namefmt,shx) "$gisfilter(rad2_namefmt).shx";
### set gisfilter(rad2_outputfile_dirfmt,shx) \
###	"rad2/shp/$gisfilter(rad2_subdirfmt)";
### set gisfilter(rad2_outputfile_namefmt,dbf) "$gisfilter(rad2_namefmt).dbf";
### set gisfilter(rad2_outputfile_dirfmt,dbf) \
###	"rad2/shp/$gisfilter(rad2_subdirfmt)";
### set gisfilter(rad2_outputfile_namefmt,info) \
###     "$gisfilter(rad2_namefmt).info";
### set gisfilter(rad2_outputfile_dirfmt,info) \
###      "rad2/shp/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,csv) "$gisfilter(rad2_namefmt).csv";
### set gisfilter(rad2_outputfile_dirfmt,csv) \
###	"rad2/csv/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,tif) "$gisfilter(rad2_namefmt).tif";
### set gisfilter(rad2_outputfile_dirfmt,tif) \
###	"rad2/tif/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,nc) "$gisfilter(rad2_namefmt).nc";
### set gisfilter(rad2_outputfile_dirfmt,nc) \
###	"rad2/nc/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,asc) "$gisfilter(rad2_namefmt).asc";
### set gisfilter(rad2_outputfile_dirfmt,asc) \
###	"rad2/asc/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,wkt) "$gisfilter(rad2_namefmt).wkt";
### set gisfilter(rad2_outputfile_dirfmt,wkt) \
###	"rad2/wkt/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_bundlelist) [list];

#
# Read the local overrides
#
if {[info exists source_gisfilter_conf_defined]} {
    return;
}
set source_gisfilter_conf_defined 1;

set _confname "gisfilter.conf";
foreach _d $common(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset -nocomplain _d;
unset -nocomplain _localconfname;
unset _confname;
