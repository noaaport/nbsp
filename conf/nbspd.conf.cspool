#
# $Id$
# $Format:Commit: %H$
# $Format:Author: <%aE> %aD$
#

#
# This file exists only for documentation purposes because the cspool
# has never been operational. The cspool section has been commented out here
# but the working file actually does not contain that section
#

#
# Sample configuration file for nbspd
#

# This configuration file uses the tcl language.
#
# In most simple cases, in which the desired configuration amounts to disable
# or enable one or more feature (e.g, a filter or built-in server)
# it can be achived by adjusting one or more settings in the file
# "features.conf". In that case, creating and adjusting that file is
# all that is needed. (The features.conf-sample file can be used as
# the starting point, after renaming it to "features.conf", or
# "site/features.conf".)
#
set _featuresconf [list "/usr/local/etc/nbsp/features.conf" \
			"/usr/local/etc/nbsp/defaults/features.conf" \
			"/usr/local/etc/nbsp/site/features.conf"];
set _featuresinit "/usr/local/libexec/nbsp/features.init"
if {[file exists ${_featuresinit}]} {
    source ${_featuresinit};
}
 
# For more fine-grained configuration settings, the rest of this file
# can be used.
#
# All options are commented out by the three '###' symbols. 
# What they show are the default values hard-coded in the program.
#
# The program will read first this file, and then the files
# "defaults/nbspd.conf" and "site/nbspd.conf", in that order, if they exist.
# Latter settings override ealier ones. Thus, although this file can be edited
# the recommended procedure is to create the file "site/nbspd.conf"
# and add the configuration settings there.

# nbspd will run as the user specified below, unless those variables
# are unset, in which case it will run as the user that starts
# the program (usually root). If the user and group options are set,
# then the commands equivalent to the following must be executed
# (with the correct user:group)
#
#	chown -R user:group /var/noaaport
#	chown -R user:group /var/log/noaaport
#	chown -R user:group /var/log/nbsp
#	chown -R user:group /var/run/nbsp

# user and group to run as, directory to chdir to, and default umask
# The supplementary groups can be set by setting the "group" to a
# comma-separated list of groups (including the main group) such as
# "noaaport,news,ldm,..."
#
### set user "noaaport"
### set group "noaaport"
### set home "/var/noaaport"
### set umask 022

# The default setting of the multicast ip's and ports are equivalent
# to the setting below. To disable some channels, modify the list to
# include only those wanted.
#
### set multicastip	"224.0.1.1 224.0.1.2 224.0.1.3 224.0.1.4 224.0.1.5"
### set multicastport	"1201 1202 1203 1204 1205"

# By default, the interface to use is chosen by the kernel. In a
# multihomed machine, the interface to use can be specified either by
# its ip address, e.g.,
#
# set ifip	"192.168.2.100"
#
# or by its name, e.g.
#
# set ifname	"xl0"	(or "fxp0", "eth1", etc) 
#
# The default values are NULL, which let the kernel choose.
#
### set ifname
### set ifip

# In FreeBSD the default is 41 KB and the maximum is 221 KB.
# In linux the default is around 109 KB and the maximum 255 KB,
# but manually setting it would disable autotuning and therefore it is
# not recommended to change the defaults.
# In MacOSX the default is 262 KB and the maximum around 7450 KB.
# In windows the default can be as low as 8 KB, so a setting like
#
#     set udprcvsize	[expr 255 * 1024]
#
# would be more reasonable.
#
# A setting <= 0 leaves the OS defaults.  (See "defaults/nbspd.conf")
# 
### set udprcvsize -1

# These (tcl) scripts are evaluated by the nbspd daemon itself as the last step
# during the initalization and shutdown phase, respectively.
#
### set startscript	"/usr/local/libexec/nbsp/nbspd-start.tcl"
### set stopscript	"/usr/local/libexec/nbsp/nbspd-stop.tcl"

# The scheduler
#

### set scheduler	"/usr/local/libexec/nbsp/scheduler"

# Spool configuration (see mspoolbdb.README)
#
# 1) file system (fs)
# 2) private memory bdb
# 3) private memory bdb with fs based enviromnent
# 4) file-backed bdb (with cache)    (not yet operational)
# 5) shared memory bdb               (not yet operational)
#
# The default is the plain fs spool. 
#
### set spooltype 1;

#
# Parameters for the fs spool (spooltype = 1)
#

# Directory where the received (unpacked) product files are saved
# before being passed to the filters.
#
### set spooldir	"/var/noaaport/nbsp/spool"

# The next setting specifies number of files to keep in the spool directory.
# If this specified as zero, the spool directory grows indefinitely.
# (In this case the hourly cron script must take care of deleting old
# files in the spool directory.) The default value corresponds to about
# 2 hours worth of files (2048 files/minute * 128 minutes).
# (To be specific, at 2500 (3000) files/min, the equivalent retention times,
# with the default below, are 1.8 (1.4) hours respectively.)
# Note that a two-hour retention spool, with a 1 MB/sec data rate,
# implies a spool size of about 8 GB. The noaaport data rate is actually
# about 45 MB/minute, which implies a two-hour spool size of 6 GB.
# With the addition of level2 data (the rate is 75 MB/min, 10 Mbps)
# the total rate is 120 MB/min so that a two-hour spool will
# take about 16 GB.
#
# (The value here influences the value of queuemaxhard, below.)
#
### set spooldb_slots	262144

# File to save (or load) the spooldb when nbsp stops (or starts)
#
### set spooldb_fname	"/var/noaaport/nbsp/db/spool.state"

#
# Parameters for the private memory bdb spool
#

# The private memory (mspoolbdb) spool is enabled by one of these settings
#
#	set spooltype 2;
#	set spooltype 3;
#
# and it is configured by the mspoolbdb_xxxx parameters below. In the first
# case, the entire db is in memory, while in the second case the data files
# are in memory but the administrative environment is on disk. The second
# setting could be slightly slower, but more secure. In any case, if the
# mspoolbdb spool is enabled, the following are required:
# - only the nbs1 server can be enabled (only nbs1 clients can be served;
#   the nbs2 and emwin servers must not be enabled).
# - all the filters must be disabled. The only filters that can be left
#   are the netfilter and the inventory. 
# - the variable "netfilter(dobody)" in the netfilter.conf file must be set
#   to zero.
#
# The default values for the mbdb spool are:
#
# dbcache_mb = 60  (each one)
# ndb = 4          (4 minutes)
# nslots = 4       (number of buffer slots for reading)
# maxsize_per128 = 96 (maximum db size as a fraction of 128)
#
# These define ndb = 4 databases, with each database configured such
# that it can hold the files received in about 1 minutes (60 MB).
# This requires 240 MB + 20% (overhead) of free memory, to hold a backlog
# of 4 minutes of data. The "nslots = 4" parameter configure 4 reading buffers
# for retrieving the data from the db to send it to the nbs1 network clients
# and the filter server. It should be set to a number of comparable to
# expected number of clients to avoid contention between the network slave
# threads. (Each buffer will grow to about 25 MB; the largest file size).
# Each db is not allowed to grow larger than (maxsize_per128/128) in order
# to reserve some of the allocated memory for the system. The default is
# 96/128 or 75%.
#
### set mspoolbdb_dbcache_mb	60;
### set mspoolbdb_ndb		4;
### set mspoolbdb_nslots	4;
### set mspoolbdb_maxsize_per128 96;

# The logfile and how often (in secs) the dbstats of the mspoolbdb are written.
#
### set mspoolbdb_dbstats_logfile "/var/noaaport/nbsp/stats/nbspd.mdbstats";
### set mspoolbdb_dbstats_logperiod_secs 60;

# This file is created when bdb reports a DB_RUNRECOVERY error. The nbspd
# exit and cleanup routine detects the presence of this file and can take
# take corrective action (cleanup and restart).
#
### set mspoolbdb_panicfile "/var/run/nbsp/nbspd.bdbpanic";
### set mspoolbdb_panicfile_mode 0666

#############################################################################
# File-backed and shared memory bdb spool   (not yet operational)
#
# NOTE: This configuration is still in development and cannot be used at this
#       moment.
# 
# The file-backed bdb spool and the shared memory (no file) bdb spool
# are configured by setting
#
#   set spooltype = 4;
#
# or
#
#   set spooltype = 5;
#
# respectively. The default values:
#
# dbcache_mb = 180 (each)
# ndb = 4          (3 minutes each, 12 minutes total)
# nslots = 4       (number buffer slots for reading)
# maxsize_per128 = 96 (maximum db size as a fraction of 128)
#
# These define ndb = 4 databases, with each database configured such
# that it can hold the files received in about 3 minutes (180 MB).
# This requires 720 MB + 20% (overhead) of free memory, to hold a cache
# of 12 minutes of data. The "nslots = 4" parameter configure 4 reading buffers
# for retrieving the data from the db to send it to the nbs1 network clients
# and the filter server. It should be set to a number of comparable to
# expected number of clients to avoid contention between the network slave
# threads. (Each buffer will grow to about 25 MB; the largest file size).
# Each db is not allowed to grow larger than (maxsize_per128/128) in order
# to reserve some of the allocated memory for the system. The default is
# 96/128 or 75%.
#
# NOTE: These settings apply to the server, which is the "writer" to the
#       cache. The "readers" are the filters, and the corresponding
#       configuration parameters must be set in the file "cspoolbdb.conf".
#
### set cspoolbdb_dir		"/var/noaaport/nbsp/cspool";
### set cspoolbdb_name		"cspooldb";
### set cspoolbdb_mode		0666;
### set cspoolbdb_dbcache_mb	180;
### set cspoolbdb_ndb		4;
### set cspoolbdb_nslots	4;
### set cspoolbdb_maxsize_per128 96;
#############################################################################

# Directory where the fifo (device) files used by the filters are placed,
# and the external (user) filters.
#
### set devdir		"/var/noaaport/nbsp/dev"

# The filter server is enabled by default
#
### set filterserver_enable 1

# The list of filters distributed with the program:
#
#	inventory
#       spoolfilter
#	rstfilter
#	dafilter
#	metarfilter
#	uafilter   (upperair)
#	wsfilter   (Weatherscope)
#	gribfilter (with GrADS as option)
#	panfilter
#       msgfilter
#       trackfilter (with GrADS as option)
#	nntpfilter (inn)
#	gpfilter (gempak)
#	ldmfilter
#	nbspfilter
#
# The filters that are enabled by default are the inventory,
# rstfilter, dafilter, metarfilter, uafilter, wsfilter and gribfilter.
# The emwin filter includes the functionality
# of the rstfilter, but the emwin server is not enabled by default.
# Use this list only if you do not enable the emwin server, otherwise
# you would end up calling the rstfilter twice. 
#
### set filterlist	"/usr/local/libexec/nbsp/inventory\
			/usr/local/libexec/nbsp/rstfilter\
			/usr/local/libexec/nbsp/dafilter\
			/usr/local/libexec/nbsp/metarfilter\
			/usr/local/libexec/nbsp/uafilter\
			/usr/local/libexec/nbsp/wsfilter\
			/usr/local/libexec/nbsp/gribfilter"

# Use this list if the emwin server is enabled (by setting the servertype
# variable below).
#
### set filterlist	"/usr/local/libexec/nbsp/inventory\
			/usr/local/libexec/nbsp/dafilter\
			/usr/local/libexec/nbsp/metarfilter\
			/usr/local/libexec/nbsp/uafilter\
			/usr/local/libexec/nbsp/wsfilter\
			/usr/local/libexec/nbsp/gribfilter"

# If gempak is installed the gempak filter can be used in addition
# to those above. For example,
#
### set filterlist	"/usr/local/libexec/nbsp/inventory\
			/usr/local/libexec/nbsp/dafilter\
			/usr/local/libexec/nbsp/metarfilter\
			/usr/local/libexec/nbsp/uafilter\
			/usr/local/libexec/nbsp/wsfilter\
			/usr/local/libexec/nbsp/gribfilter\
			/usr/local/libexec/nbsp/gpfilter"

# If the nntp gateway is configured (e.g. inn), this enables the nntp filter
#
### set filterlist	"/usr/local/libexec/nbsp/inventory\
			/usr/local/libexec/nbsp/dafilter\
			/usr/local/libexec/nbsp/metarfilter\
			/usr/local/libexec/nbsp/uafilter\
			/usr/local/libexec/nbsp/wsfilter\
			/usr/local/libexec/nbsp/gribfilter\
			/usr/local/libexec/nbsp/gpfilter\
			/usr/local/libexec/nbsp/nntpfilter"

# The ldmfilter will insert the received files in an ldm product queue.
# The ldm software must be installed.
#
# The filter called by the emwin server. The filter calls the rst filter
# and then does some further processing. If the emwin server is not enabled
# the rst filter can be called independently by including it in the
# filterlist above. The filter uses a fifo to communicate with the server
# and the $emwinfilter_timeout variables sets the maximum number of seconds
# that the server will wait for the filter's response.
#
# set emwinfilter	"/usr/local/libexec/nbsp/emwinfilter"
# set emwinfilter_fifo	"/var/run/nbsp/emwinfilter.fifo"
# set emwinfilter_read_timeout_secs	30

# If the emwin server is enabled, setting this variable to 0
# causes the server to not invoke the emwin and rst filters
# when there are no connections. The default is to invoke the filters
# always so that the file is processed by the rst filter even when
# there are no clients to transmit it. If the emwin filter is not enabled
# this variable is ignored.
#
### set emwinfilter_always	1

# This is the filter that controls what products are sent to the network
# clients (including emwin clients) using allow/deny rules. If the filter
# is disabled, then every product is sent to every client.
#
### set netfilter_enable	1
### set netfilter		"/usr/local/libexec/nbsp/netfilter"

# Whether the httpd is enabled and the path of the tclhttpd script.
# The configuration options specific to the httpd server can be set in
# the file httpd.conf in this same directory.
#
### set httpd_enable		1
### set httpd			"/usr/local/libexec/nbsp/httpd"

# The pid and the status (statistics) files
#
### set pidfile		"/var/run/nbsp/nbspd.pid"
### set pidfilemode	0666
### set statusfile	"/var/noaaport/nbsp/stats/nbspd.status"
### set missinglogfile  "/var/noaaport/nbsp/stats/nbspd.missing"
### set rtxlogfile	"/var/noaaport/nbsp/stats/nbspd.rtx"
### set qstatelogfile	"/var/noaaport/nbsp/stats/nbspd.qstate"
### set qdbstatslogfile	"/var/noaaport/nbsp/stats/nbspd.qdbstats"
### set serverstatefile	"/var/noaaport/nbsp/stats/nbspd.server"
### set serveractivefile "/var/noaaport/nbsp/stats/nbspd.active"
### set serverthreadsfile "/var/noaaport/nbsp/stats/nbspd.sthreads"
### set filterserver_statefile "/var/noaaport/nbsp/stats/nbspd.filter";
### set slavestatsfile "/var/noaaport/nbsp/stats/nbspd.slavestats";

# The internal (queues) state fifo file and its mode
#
### set qstatefifo	"/var/run/nbsp/nbspd.fifo"
### set qstatefifomode	0666

# The file creation mode of the products and the subdirectories
# where the products are saved (expressed here in octal form)
#
### set productmode	0666
### set subdirmode	0777

# By default, the files in the spool directory are saved with the ccb header
# (for those files that have the ccb header). A value of 1 here indicates
# to strip the ccb. If this parameter is changed, then the parameters
#   common(ccbsaved)
#   filterslib(ccbsaved)
# have to be set to 0 in filters.conf (to configure the filters and the filters
# library accordingly).
#
### set spoolsavefmt	0

# How often to re-compute the statistics saved in the status file (in seconds)
#
### set nbspstats_logperiod_secs	60

# How often to write the state and dbstats of the queues to their logfiles
# (in seconds)
#
### set qstate_logperiod_secs	60

# How often to report the state of the server connections (seconds). Also
# used to report the status of the filter server.
#
### set serverstate_logperiod_secs	60

# How often to write the server threads statistics. If the "packets" parameter
# is positive then the stats are written after that number
# of packets have been transmitted to the client. Otherwise the "secs"
# parameter is used.
#
# set serverthreads_logperiod_packets	-1
# set serverthreads_logperiod_secs	60

# Which network server to spawn. The default is none, so the program does not
# redistribute anything. The other values are 4 for emwin protocol,
# or 1 or 2 for the native NBS1, NBS2 protocols, or any combination of 
# the three. With NBS1 the full content of the file is transmitted
# (similar to emwin) and with NBS2 only the file path information
# is transmitted (the same information sent to the filters).
# If the emwin server is enabled, the emwin filter rc file must also be
# installed (it is installed by default).
#
# NOTE: If the emwin server is enabled (e.g. "set servertype 4" below),
# then the rstfilter must be disabled above.
#
### set servertype	0

# Name and port to listen for network clients. If the name is not set here
# (the default) then the result returned by gethostname() is used. If
# it is set to "*", nbspd will bind to the ipv4 wildcard 0.0.0.0 address.
# If it is set to "**" it will bind to the ipv6 wildcard 0::0 address.
# Otherwise it wil bind to the given address, or to the first address returned
# by getaddrinfo() for the given name.
#
# The officially assigned port by IANA is
#
# noaaport        2210/tcp   NOAAPORT Broadcast Network
# noaaport        2210/udp   NOAAPORT Broadcast Network
#
### set servername
### set serverport	"2210"

# A value of -1 here allows an unlimited number of network clients.
#
### set server_maxclients	-1

# The tcp buffer size used for clients; -1 leaves the default.
#
### set server_so_sndbuf -1

# How long a master waits for a client to identify itself.
# After a net client connects it must identify its protocol. If has not
# done so after this time limit (in seconds) the master sets the
# protocol to the default (assumed to be emwin by default).
#
### set server_clientid_timeout_secs 10

# Readers' timeout waiting for noaaport broadcasts (in seconds). 
#
### set broadcast_read_timeout_secs	60

# Milliseconds to wait writing to a filter fifo
#
### set fifo_write_timeout_ms	500

# Milliseconds to wait while writing to network clients, and how many
# more times to try if a timeout occurs.
#
### set client_write_timeout_ms		5000
### set client_write_timeout_retry	2

# How long the server thread of each client waits for a client to reconnect
# and how many times to wakeup and check before droping the client.
#
### set client_reconnect_wait_sleep_secs  10
### set client_reconnect_wait_sleep_retry 6

# These four "client_xxx" parameters, as well as the
# "client_queue_read_timeout_ms" parameter that is introduced below,
# can be set on a per-host basis by setting this variable
#
# set clientoptions {
#     ltp.uprrp.edu,2000,2,10,12,10000
#     thunder.wxpro.net,10000
#     indra.wxpro.net,10000,x,x,12
#     ...
# }
#
# The parameters that do not appear, or are empty or are set to a
# non-numeric value, then take the global default value defined above
# (and below in the case of client_queue_read_timeout_ms).
# 
# The default clientoptions is NULL in which case the global settings 
# apply to all the connections.
#
### set clientoptions

# The block size parameter for the memory IO files that are used
# to save the incoming frames prior to being processed, and the initial
# size allocated for the file. The blocksize should
# be set to something around the average size of a frame (2k), and the minimum
# size should be such that most of the products transmitted fit in it (1024k)
# (Both sizes are in bytes.)
#
### set memfileblocksize	2048 
### set memfileminsize		1048576

# The directory containg the db queue files, the db memory cache size (in MB),
# the db queue extent size and the file creation mode.
# Assuming a rate of 1 MB/sec, or 60 MB/min, a cache of 64 MB can hold
# a backlog of about one minute, or about 1000 files (in the pctlmf.db).
# On the other hand, each entry in the q0,q1 and network queues takes
# around 1KB combined, which amounts to 1 MB for each 1000 files, or each 
# minute, of backlog. Ideally, the dbcachemb should probably be set to a
# value several times times this default (the value shown after the semicolon,
# but that requires more than 1 GB of memory).
#
### set dbhome			"/var/noaport/nbsp/db"
### set dbcachemb		256;	# 1024
### set dbextent		128;	# 256
### set dbfilemode		0666

# The name of the db files of the filter and network server queues
# (without the extension), and of the processor queues.
#
### set qdbfname		"q"
### set pctldbfname		"pctl.db"
### set pctlmfdbfname		"pctlmf.db"

# Maximum size of any channel of the filter and server queues,
# and how often (in secs) to report when the size is exceeded.
# Reaching the soft limit generates a warning. The hard limit is an
# absolute maximum. Either or both can be disabled by setting them to 0.
# (Size here refers to the number of elements in the queue, not the byte size.)
# Each entry in the queue occupies about 20 + strlen(full path) bytes, about
# 80 bytes total.
#
# Note that queuemaxhard cannot be larger than spooldb_slots (above),
# since otherwise the filter/server queues would then contain files
# that have been deleted already from the spool db,
# and therefore the filters (and server) would not find them.
# So, queuemaxhard should not be zero (disabled) unless spooldb_slots
# is also set to zero.
#
# The parameter "queue_quota_logperiod_secs" specifies how often to
# report the condition when limits are exceeded, while
# "queue_read_timeout_ms" is the timeout for the net server and filter server
# reading from the queues.
# 
### set queuemaxsoft		16384
### set queuemaxhard		[expr $spooldb_slots/2]
### set queue_read_timeout_ms	1000
### set queue_quota_logperiod_secs	60

# These numbers operate similar to the above but they apply
# to the processor queue. The second pair of numbers (maxmem) are given
# in terms of the memory of the pctl (the sizes are in mb), and
# both pairs are used. The last patrameter is the processor timeout
# reading from the processor queue.
#
### set pctlmaxsoft		2048
### set pctlmaxhard		0
### set pctlmaxmemsoft		128
### set pctlmaxmemhard		256
### set pctl_read_timeout_ms	1000

# The network client db queues. They are all in-memory. Each entry in
# each queue is around 100 bytes (the packetinfo or emwininfo struct).
# A cache of 1 MB for each queue is enough to hold a few thousand entries.
# The parameter "client_queue_read_timeout_ms" specifies the timeout for
# reading from these queues by the servers' threads that service the
# individual network client connections; this parameter is configurable
# on a per-client basis in the clientoptions string as explained above.
#
### set clientqueuedbcachemb	1
### set clientqueuemaxsoft	1024
### set clientqueuemaxhard	2048
### set client_queue_read_timeout_ms	10000

# The received files database (used to keep track of retransmissions).
# If the variable rtxdb_dbfname is unset or set to "", then the database
# is purely memory-based without a backing file (which is the default).
# The second parameter is actually ignored except if it is set to zero
# in which case the database is disabled; in this case all the retransmissions
# are processed if "rtxdb_default_process" is non-zero, or rejected otherwise.
# The data base is truncated every "rtxdb_truncate_minutes" minutes.
#
### set rtxdb_dbfname
### set rtxdb_slots		12000
### set rtxdb_truncate_minutes 10
### set rtxdb_default_process  1

# The loadave_max_hard parameter is compared against the first number returned
# by getloadavg(). If the latter exceeds the former then the high load
# flag is raised and the readers are throttled (sleep) for the number of
# seconds given in loadave_max_sleep_secs, until the load becomes less than
# loadave_max_soft. The loadave_checkperiod_secs parameter specifies how often
# to check the average load condition. Setting loadave_max_hard or soft
# to zero disables the corresponding check, and that is the default
# configuration.
#
# In addition, when loadave_max_soft is reached, then the retransimssion
# index is checked. If it exceeds the value given by loadave_max_rtx_index
# then the retransmissions will be rejected until
# the index becomes smaller.  The retransmission index is measured
# as the number of retransmissions per 1000 products received.
#
# Of course, if the machine is overloadad the real solution is to reduce
# the number of filters that are enabled. But this mechanism can be useful
# to mitigate those situations in which there are too many retransmissions.
# For one-cpu machines, setting max_loadave_hard = 4 is reasonable,
# or loadave_max_hard = 6 for two-cpu's. Then loadave_max_soft can be set to
# (loadave_max_hard - 1).  
#
### set loadave_max_hard 0
### set loadave_max_soft 0
### set loadave_max_sleep_secs 30
### set loadave_checkperiod_secs 30
### set loadave_max_rtx_index 250

# There are three possible feed modes, and the next parameters
# specify which ones are enabled. A feedmode of 1 (default) is
# the master feed (noaaport multicast), the value 2 defines a network slave,
# and if feedmode is set to 4 the program reads from a
# local fifo (e.g. a feed from inn). Any combination of all three can
# be specified by adding the values. For example, setting
#
# set feedmode 5
#
# enables the master feed and the local input fifo.
# For a network slave, the "masterservers" must be set to specify the
# protocol, master(s) and optionally the port of the master(s),
# and optionally the five options
#
#  slave_read_timeout_secs
#  slave_read_timeout_retry
#  slave_reopen_timeout_secs
#  slave_so_rcvbuf
#  slave_stats_logperiod_secs
#
# The masterservers is a string of the form
#
# <protocol>,<server>[:<port>][,<options>]|<protocol>,<server>[:<port>],...
#
# where the separating character can be any combination of '| \t\n';
# for example
#
# set masterservers {
#     1,nbsp.uprrp.edu
#     1,nbsp.noaaport.net,2210
#     2,laurel.wxpro.net,2210,10
#     2,hardy.wxpro.net,2210,10,,,,300
#     2,joshua.wxpro.net,,10,,,,300
#     2,scooby.wxpro.net,,10,x,x,x,300
# }
#
# If the <port> is omitted or empty, the default port (below) is used.
# If the <options> are omited, or if some of the fields are empty (as in
# the fourth entry) or set to a non-numeric value (as in the sixth), then
# the defaults given below are used for those fields. The ":" character
# can be used instead of ",".
#
# In protocol 1 (fdata slave) the entire file content is transmitted,
# while in 2 (fpath slave) only the location (full path) of the
# file is transmitted (requires NFS setup).

### set feedmode	1
### set masterservers
### set slave_masterport "2210"
#
# The reading timeout (in seconds), retry attempts and how long to wait
# (in seconds) before trying to reconnect. 
#
### set slave_read_timeout_secs		10
### set slave_read_timeout_retry	2
### set slave_reopen_timeout_secs	1

# The tcp buffer size; -1 leaves the default.
#
### set slave_so_rcvbuf -1

# How often the slave threads report the stats (in seconds).
#
### set slave_stats_logperiod_secs 60;

# When a slave reads from multiple masters, it is possible that it will
# receive duplicates of the same file, depending on what each master
# is configured to send. This option can be used to enable the detection
# (and rejection) of such duplicates, and it is set in the default
# configuration.
#
### set slave_reject_duplicates 1

# The local feed slave mode (used, e.g., by the inn nntp feed) when
# the feedmode above is set to (or includes) 4.
#
### set infeedfifo	"/var/run/nbsp/infeed.fifo"
### set infeedfifomode	0666
### set infeedfifogrp	$group

# The next parameter is a string that hold the regular expressions
# for the accept filter. In the default configuration nothing 
# is set, which means that everything is accepted and saved in the spool
# directory.
# 
# The algorithm works as follows. If the expression is not set, then everything
# is accepted. If it is set but empty (i.e., set to ""), then nothing is
# accepted. Otherwise the expression should be a comma-separated list of RE's,
# some of which may be negated by putting exclamation sign before the RE.
#
# For example,
#
#	set acceptpatt {.*,!kwal}
#
# The file name is matched against each pattern in the list, from left to
# right. If no match is found, the file is rejected. Otherwise, the file
# is accepted if and only if the right-most pattern that matched was
# not negated. The special string ".*", is a match-all pattern.
# Some examples are given below.
#
# In the default configuration, most RE parameters (with the exceptions noted
# below) are not set (they are NULL), so everything passes.
#
### set acceptpatt	

# The next parameters are similar, but they control what products the
# processor sends to the filter and the server queues for postprocessing.
#
### set filterqacceptpatt	
### set serverqacceptpatt	
 
# The next parameters are similar, but they control what products the
# server distributes to clients.
#
### set nbs1acceptpatt
### set nbs2acceptpatt
### set emwinacceptpatt	

# Files with names matching this pattern are saved in the spool directory
# in compressed form if they are transmitted in that form
# (e.g., radar data, sat images). To uncompress all those files on the fly,
# use (since no file name will match it)
#
#    set savezacceptpatt ""
#
# while a setting like
#
#    set savezacceptpatt "_(sdus[2357]|tig)"
#
# leaves compressed the radar and satellite files and uncompresses the rest.
# However, a better alternative is to leave the uncompression for the
# postprocessing phase by the filters, which is the default setting. 
#
### set savezacceptpatt

# A record of the received files can be kept in a db to monitor
# retransmissions and avoid processing duplicate files. The db
# operations can be expensive so inserting all records can be degrade
# performance more than help. This filter can be configured so that only
# certain files are monitored for retransmissions. The files placed here
# should be those for which the cost of reprocessing is more than
# the overhead of the db management. The default is to insert everything,
# which means that retransmissions are not reprocessed if the original file
# was received well.
#
# set rtxdbacceptpatt
#
# For example, to monitor the retransmission of only grib and bufr files,
# a setting like
#
# set rtxdbacceptpatt	{\+(grib|bufr)}
#
# can be used.

#
# Examples
#

# To acept files only from the San Juan station
#
### set acceptpatt	{tjsj}

# To accept only from the San Juan station and the National Hurricane Center
# (the character in the middle is a vertical bar "|"),
# both of these do the same thing
#
### set acceptpatt		{tjsj|knhc}
### set acceptpatt		{tjsj,knhc}

# To accept everything except one station,
#
### set acceptpatt		{.*,!kwal}

# The same thing but allowing some files from kwal
#
### set acceptpatt		{.*,!kwal,kwal_xxxx}

# To accept only from stations with names starting with kw, but
# rejecting "kwal"
#
### set acceptpatt		{^kw,!^kwal}

# To accept anything except grib or bufr files
#
## set acceptpatt	{.*,!\+(grib|bufr)}

# To accept only metars
#
## set acceptpatt	{_s[ap]}

# To accept anything except metars
#
## set acceptpatt	{.*,!_s[ap]}

# An alternative to setting the values of those strings directly here
# is to read them from an external file using a tcl construct such as
# 
### set acceptpatt	[exec cat "/usr/local/etc/nbsp/noaaport.accept"]

#
# Directories containing the local overrrides
#
set nbspdconfdir         "/usr/local/etc/nbsp"
set nbspdlocalconfdirs   [list [file join $nbspdconfdir "defaults"] \
	                       [file join $nbspdconfdir "site"]];

## regexp {^[^\.]+} [info hostname] _hostname;
## lappend nbspdlocalconfdirs [file join $nbspdconfdir "site" ${_hostname}];

# Read the local overrides
set _confname 		"nbspd.conf";

if {[info exists source_nbspd_conf_defined]} {
    return;
}
set source_nbspd_conf_defined 1;

foreach _d $nbspdlocalconfdirs {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset _d;
unset _confname;
unset _localconfname;
