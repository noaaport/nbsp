aug2022

Following the strategy in npemwininsert, the infeed fifo is opened here
in blocking mode for the write. This ensures that there will not be more
writes than the pipe has space for and no insertions are lost.

july2022

I had added flock (from tclx) in the function sendtof in nbspinsert
to avoid races when different processes (e.g., craftfilter and npemwin)
were calling nbspinsert. The flock() was implementef in the infeed.fifo.
The problem is that it works in linux but not in freebsd. The origin
seems to be that the fcntl() syscall does not work in a fifo in Freebsd.
The program a.c and the script a.tcl illustrate that. Both work on a normal
file (e.g., infeed.lock) but not on the infeed.fifo (in freebsd).

A workaround is to use a lock file (infeed.lock) in conjuction
to infeed.fifo. This what the scripts read.sh, and test?.tcl show.

In three separate terminals, execute

./read.sh
./test1.tcl
./test2.tcl

The implementation of this locking scheme is exemplified
by the scripts in the folder "implementation". It consists
of a separate (normal) file used for locking, with a name
derived from the fifo file (with the extension "lock" appended).
The lock file can be crated by invoking nbspinsert once as
``nbspinsert -l''.

Another revision had to do with the stage at which the fifo
is opened and closed. (See also the note in the function sendtof() in the
nbspinsert script.)
